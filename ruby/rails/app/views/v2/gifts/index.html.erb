<% if current_user != page_user %>
<h2><%= possessivize(page_user.display_name) %> Gifts</h2>
<% end %>

<div id='notes'>
  <h3>Notes:</h3>
  <pre><%= page_user.notes %></pre>
</div>

<ul id='gift-menu' class='o-inline-list'>
  <li><%= link_to_function 'New', "window.gifts.onNewClicked('#{new_user_gift_path(page_user)}')", :class => 'o-button' %></li>
  <li><%= link_to 'Export', user_gifts_path(page_user, :format => 'csv'), :class => 'o-button' %></li>
  <%- if params[:tag] -%>
  <li>Tagged:
    <%= link_to(url_for(:tag => nil), :class => 'o-button u-destructive o-link--with-icon') do -%>
      <%= h(params[:tag]) %> <%= image_tag('delete-icon.svg') %>
    <%- end -%>
  </li>
  <%- end -%>
  <li>Sorted By: <%= select_tag('order', sort_options, :onChange => "window.location=window.gifts.replaceOrder(this.value);") %></li>
</ul>

<div id='gift-list' class='c-item-list'>
  <%= render :partial => 'gift', :collection => @gifts %>
</div>

<script>
  window.gifts = {
    hideMenu: function() {
      document.getElementById('gift-menu').classList.add('is-hidden');
    }, // hideMenu

    onEditClicked: function(gift_id, edit_gift_path) {
      window.gifts.hideMenu();

      jQuery.ajax(edit_gift_path, {

      }).done(function(data, textStatus, jqXHR) {
        $(`#gift-${gift_id}`).replaceWith(data);

      }).fail(function(jqXHR, txtStatus, errorThrown) {
        window.showErrorDialog('Error', 'Unable to create a gift');
        window.gifts.showMenu();
      });

    }, // onEditClicked

    onCancelCreateClicked: function() {
      window.gifts.showMenu();
      $('#gift-new').remove();
    }, // onCancelEditClicked

    onCancelEditClicked: function(id, user_gift_path) {
      window.gifts.showMenu();

      jQuery.ajax(user_gift_path, {

      }).done(function(data, textStatus, jqXHR) {
        $(`#${id}`).replaceWith(data);

      }).fail(function(jqXHR, txtStatus, errorThrown) {
        // gift was probably deleted
        $(`#${id}`).remove();
      });

    }, // onCancelEditClicked

    onNewClicked: function(new_gift_path) {
      window.gifts.hideMenu();

      jQuery.ajax(new_gift_path, {

      }).done(function(data, textStatus, jqXHR) {
        document.getElementById('gift-list').insertAdjacentHTML('afterbegin', data);

      }).fail(function(jqXHR, txtStatus, errorThrown) {
        window.showErrorDialog('Error', 'Unable to create a new gift');
        window.events.showMenu();
      });

    }, // onNewClicked

    replaceOrder: function (value) {
      var key       = 'order';
      var uri       = window.location.search;
      var regex     = new RegExp("([?&])" + key + "=.*?(&|$)", "i");
      var separator = uri.indexOf('?') !== -1 ? "&" : "?";
      var result    = '';

      if (uri.match(regex)) {
        result = uri.replace(regex, '$1' + key + "=" + value + '$2');
      } else {
        result = uri + separator + key + "=" + value;
      }

      return result;
    }, // replaceOrder

    showMenu: function() {
      document.getElementById('gift-menu').classList.remove('is-hidden');
    }, // showMenu

  } // window.gifts
</script>
